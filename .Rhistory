comp_df <- data_frame(
linear_predictor = model_preds_val,
response = project_data_val$repay_fail
)
comp_df %>%
arrange(linear_predictor) %>%
mutate(pc = ntile(linear_predictor,10)) %>%
group_by(pc) %>%
summarise(n_response_1 = sum(response),
exp_response_1 = sum(linear_predictor),
exp_variance = sum(linear_predictor*(1-linear_predictor)) ) %>%
ggplot() + geom_point(aes(x=exp_response_1,y=n_response_1)) +
geom_errorbar(aes(y=n_response_1,
x=exp_response_1,
ymax = n_response_1 + 3*sqrt(exp_variance),
ymin = n_response_1 - 3*sqrt(exp_variance)
)) +
geom_abline(slope = 1, intercept = 0)
buildComparisonsofN <- function(N, sample_size1, sample_size2){
map2_df(getNData(N*sample_size1,func_list) %>% split(f = 1:sample_size1),
getNData(N*sample_size2,func_list) %>% split(f = 1:sample_size2),
qcomhdMC, q = c(0.1, 0.5, 0.9), plotit = F)
}
buildComparisonsofN <- function(sample_size1, sample_size2, N){
map2_df(getNData(N*sample_size1,func_list) %>% split(f = 1:sample_size1),
getNData(N*sample_size2,func_list) %>% split(f = 1:sample_size2),
qcomhdMC, q = c(0.1, 0.5, 0.9), plotit = F)
}
help("seq_along")
seq(40, 200, 5)
expand.grid( seq(40, 200, 5) )
expand.grid( seq(40, 200, 5), seq(40, 200, 5)  )
expand.grid( seq(40, 200, 5), seq(40, 200, 5)  ) %>% arrange()
library(dplyr)
library(purrr)
library(WRShd)
expand.grid( seq(40, 200, 5), seq(40, 200, 5)  ) %>% arrange()
expand.grid( seq(40, 200, 5), seq(40, 200, 5)  ) %>% arrange(var1)
a <- expand.grid( seq(40, 200, 5), seq(40, 200, 5)  )
data_frame(a)
as_data_frame(a)
expand.grid( seq(40, 200, 5), seq(40, 200, 5) ) %>% as_data_frame()
expand.grid( seq(40, 200, 5), seq(40, 200, 5) ) %>% as_data_frame() %>% arrange(Var1)
View(a)
library(gtools)
permutations(r = 2, v = seq(40, 200, 5))
permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)))
permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F)
View(a)
a <- combinations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)))
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F)
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F) %>%
filter(V1 >= V2)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F) %>%
as_data_frame() %>%
filter(V1 >= V2)
View(a)
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F) %>%
as_data_frame() %>%
filter(V1 >= V2)
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F) %>%
as_data_frame() %>%
filter(V1 >= V2) %>% arrange(V1)
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = F)
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = T)
View(a)
a <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = T) %>%
as_data_frame() %>%
filter(V1 >= V2) %>% arrange(V1)
View(a)
test_samples <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = T) %>%
as_data_frame() %>%
filter(V1 >= V2) %>% arrange(V1)
func_list <-
c(
function(){runif(1,55,77)},
function(){runif(1,90,110)},
function(){runif(1,115,135)},
function(){runif(1,145,160)},
function(){runif(1,180,200)},
function(){runif(1,200,240)}
)
weight_vector <- c(2,3,4,16,10,4)
getNData <- function(n, func_list){
sample(func_list,size=n, replace = T, prob = weight_vector) %>%
sapply(do.call, args=list())
}
buildComparisonsofN <- function(sample_size1, sample_size2, N){
map2_df(getNData(N*sample_size1,func_list) %>% split(f = 1:sample_size1),
getNData(N*sample_size2,func_list) %>% split(f = 1:sample_size2),
qcomhdMC, q = c(0.1, 0.5, 0.9), plotit = F)
}
test_samples <- permutations(r = 2, v = seq(40, 200, 5), n = length(seq(40, 200, 5)), repeats.allowed = T) %>%
as_data_frame() %>%
filter(V1 >= V2) %>% arrange(V1)
result <- buildComparisonsofN(list(40), list(39), 100)
result <- map2_df(list(40), list(39), buildComparisonsofN, 100)
result <- map2_df(list(a=40), list(b=39), buildComparisonsofN, 100)
list(a=40)
list(b=39)
result <- map2_df(list(a=40), list(b=39), buildComparisonsofN, 100)
result <- map2_df(c(39), c(39), buildComparisonsofN, 100)
View(result)
View(result)
buildComparisonsofN <- function(sample_size1, sample_size2, N){
map2_df(getNData(N*sample_size1,func_list) %>% split(f = 1:sample_size1),
getNData(N*sample_size2,func_list) %>% split(f = 1:sample_size2),
qcomhdMC, q = c(0.1, 0.5, 0.9), plotit = F)
}
result <- map2_df(c(39), c(39), buildComparisonsofN, 100)
View(result)
result <- map2_df(c(39), c(39), buildComparisonsofN, 50)
View(result)
buildComparisonsofN <- function(sample_size1, sample_size2, N){
map2_df(getNData(N*sample_size1,func_list) %>% split(f = 1:N),
getNData(N*sample_size2,func_list) %>% split(f = 1:N),
qcomhdMC, q = c(0.1, 0.5, 0.9), plotit = F)
}
result <- map2_df(c(39), c(39), buildComparisonsofN, 50)
View(result)
result <- map2_df(c(39,138), c(39,138), buildComparisonsofN, 50)
library(readr)
View(result)
result <- map2_df(c(39), c(39), buildComparisonsofN, 50)
source('~/repos/ParticleSize/hd_comp_example.R')
source('~/repos/ParticleSize/hd_comp_example.R')
View(result)
read_rds("~/repos/ParticleSize/result.rds")
library(readr)
read_rds("~/repos/ParticleSize/result.rds")
install.packages("revealjs", type = "source")
library(revealjs)
mtcars
lm(data = mtcars,
formula = mpg ~ cyl + wt + am)
data("mtcars")
lm(data = mtcars,
formula = mpg ~ cyl + wt + am) %>%
summary()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
data("mtcars")
lm(data = mtcars,
formula = mpg ~ cyl + wt + am) %>%
summary()
modl <- lm(data = mtcars,
formula = mpg ~ cyl + wt + am)
sum(resid(modl)^2)
sum(resid(modl))
sum(resid(modl)^2)
sum(resid(modl)^2)/31
(sum(resid(modl)^2)/31)^0.5
aov(modl)
sum(modl$residuals^2)
sum((mtcars$mpg - mean(mtcars$mpg))
)
sum((mtcars$mpg - mean(mtcars$mpg)^2)
sum((mtcars$mpg - mean(mtcars$mpg)^2))
sum((mtcars$mpg - mean(mtcars$mpg))^2)
sum((mtcars$mpg - mean(mtcars$mpg))^2) - sum(modl$residuals^2)
sum((mtcars$mpg - mean(mtcars$mpg))^2) - sum(modl$residuals^2)/sum(modl$residuals^2)
(sum((mtcars$mpg - mean(mtcars$mpg))^2) - sum(modl$residuals^2)) /sum(modl$residuals^2)
(sum((mtcars$mpg - mean(mtcars$mpg))^2) - sum(modl$residuals^2)) / sum(modl$residuals^2)
(sum((mtcars$mpg - mean(mtcars$mpg))^2)/31) / ((sum(modl$residuals^2))/4)
(sum((mtcars$mpg - mean(mtcars$mpg))^2)/31) / ((sum(modl$residuals^2))/4)
(sum((mtcars$mpg - mean(mtcars$mpg))^2)/31)
((sum(modl$residuals^2))/4)
((sum((mtcars$mpg - mean(mtcars$mpg))^2) - sum(modl$residuals^2))/3) / (sum(modl$residuals^2)/28)
sum(modl$residuals^2)
sum(modl$residuals^2) / (sum( (mtcars$mpg - mean(mtcars$mpg))^2 ))
1- sum(modl$residuals^2) / (sum( (mtcars$mpg - mean(mtcars$mpg))^2 ))
glm(data = mtcars,
formula = mpg ~ cyl + wt + am,
family = gaussian(link="identity")
) %>%
summary()
sqrt(6.823)
```{r, echo=FALSE}
glm(data = mtcars,
formula = mpg ~ cyl + wt + am,
family = gaussian(link="identity")
) %>%
summary()
glm(data = mtcars,
formula = mpg ~ cyl + wt + am,
family = gaussian(link="log")
) %>%
summary()
# Observations
# Dispersion = rse from lm ^2
# Null deviance = total sum of squares
# Residual deviance = sum of squared residuals
glm(data = mtcars,
formula = mpg ~ cyl + wt + am,
family = gaussian(link="identity")
) %>%
summary()
# Observations
# Dispersion = rse from lm ^2
# Null deviance = total sum of squares
# Residual deviance = sum of squared residuals
length(seq(40, 1200, 40))
library(readr)
library(dplyr)
library(magrittr)
#break up the project data to make life hard for students
project_data <- read_csv('./WIL_Project/data/LoanStats3a.csv')
CUSTOMER_LOAN <- project_data %>% select(id:dti)
CUSTOMER_LOAN_HISTORY <- project_data %>% select(id, member_id, delinq_2yrs:total_il_high_credit_limit)
#Create some duplicates
CUSTOMER_LOAN_SCRAMBLE <- CUSTOMER_LOAN %>% sample_n(2153) %>% bind_rows(CUSTOMER_LOAN) %>% sample_frac(.95)
CUSTOMER_LOAN_HIST_SCRAMBLE <- CUSTOMER_LOAN_HISTORY %>% sample_n(925) %>% bind_rows(CUSTOMER_LOAN_HISTORY) %>% sample_frac(.95)
#Add Some TEST data outliers
test_data = read_csv('~/repos/mxb344/WIL_Project/data/TEST_DATA.csv')
CUSTOMER_LOAN_SCRAMBLE <-
test_data %>% select(id:dti) %>% bind_rows(CUSTOMER_LOAN_SCRAMBLE)
CUSTOMER_LOAN_HIST_SCRAMBLE  <-
test_data %>% select(id, member_id, delinq_2yrs:num_tl_120dpd_2m) %>% bind_rows(CUSTOMER_LOAN_HIST_SCRAMBLE)
#Write data pieces
write_csv(x=CUSTOMER_LOAN_SCRAMBLE, path='~/repos/mxb344/WIL_Project/data/CUSTOMER_LOAN.csv')
write_csv(x=CUSTOMER_LOAN_HIST_SCRAMBLE, path='~/repos/mxb344/WIL_Project/data/CUSTOMER_LOAN_HISTORY.csv')
library(readr)
library(dplyr)
library(magrittr)
#break up the project data to make life hard for students
project_data <- read_csv('./WIL_Project/data/LoanStats3a.csv')
CUSTOMER_LOAN <- project_data %>% select(id:dti)
CUSTOMER_LOAN_HISTORY <- project_data %>% select(id, member_id, delinq_2yrs:total_il_high_credit_limit)
#Create some duplicates
CUSTOMER_LOAN_SCRAMBLE <- CUSTOMER_LOAN %>% sample_n(2153) %>% bind_rows(CUSTOMER_LOAN) %>% sample_frac(.95)
CUSTOMER_LOAN_HIST_SCRAMBLE <- CUSTOMER_LOAN_HISTORY %>% sample_n(925) %>% bind_rows(CUSTOMER_LOAN_HISTORY) %>% sample_frac(.95)
#Add Some TEST data outliers
test_data = read_csv('~/repos/mxb344/WIL_Project/data/TEST_DATA.csv')
CUSTOMER_LOAN_SCRAMBLE <-
test_data %>% select(id:dti) %>% bind_rows(CUSTOMER_LOAN_SCRAMBLE)
CUSTOMER_LOAN_HIST_SCRAMBLE  <-
test_data %>% select(id, member_id, delinq_2yrs:num_tl_120dpd_2m) %>% bind_rows(CUSTOMER_LOAN_HIST_SCRAMBLE)
#Write data pieces
write_csv(x=CUSTOMER_LOAN_SCRAMBLE, path='~/repos/mxb344/WIL_Project/data/CUSTOMER_LOAN.csv')
write_csv(x=CUSTOMER_LOAN_HIST_SCRAMBLE, path='~/repos/mxb344/WIL_Project/data/CUSTOMER_LOAN_HISTORY.csv')
ls
getwd
getwd()
setwd("~/repos/MXB344/WIL_Project")
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
setwd("~/repos/MXB344")
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
library(readr)
library(dplyr)
library(magrittr)
#break up the project data to make life hard for students
project_data <- read_csv('./WIL_Project/data/LoanStats3a.csv')
CUSTOMER_LOAN <- project_data %>% select(id:dti)
CUSTOMER_LOAN_HISTORY <- project_data %>% select(id, member_id, delinq_2yrs:total_il_high_credit_limit)
#Create some duplicates
CUSTOMER_LOAN_SCRAMBLE <- CUSTOMER_LOAN %>% sample_n(2153) %>% bind_rows(CUSTOMER_LOAN) %>% sample_frac(.95)
CUSTOMER_LOAN_HIST_SCRAMBLE <- CUSTOMER_LOAN_HISTORY %>% sample_n(925) %>% bind_rows(CUSTOMER_LOAN_HISTORY) %>% sample_frac(.95)
#Add Some TEST data outliers
test_data = read_csv('~/repos/mxb344/WIL_Project/data/TEST_DATA.csv')
CUSTOMER_LOAN_SCRAMBLE <-
test_data %>% select(id:dti) %>% bind_rows(CUSTOMER_LOAN_SCRAMBLE)
CUSTOMER_LOAN_HIST_SCRAMBLE  <-
test_data %>% select(id, member_id, delinq_2yrs:num_tl_120dpd_2m) %>% bind_rows(CUSTOMER_LOAN_HIST_SCRAMBLE)
#Write data pieces
write_csv(x=CUSTOMER_LOAN_SCRAMBLE, path='~/repos/mxb344/WIL_Project/data/CUSTOMER_LOAN.csv')
write_csv(x=CUSTOMER_LOAN_HIST_SCRAMBLE, path='~/repos/mxb344/WIL_Project/data/CUSTOMER_LOAN_HISTORY.csv')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
test_data = read_csv('~/repos/mxb344/WIL_Project/data/TEST_DATA.csv')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
source('~/repos/MXB344/WIL_Project/Project_data_scramble.R')
640/40
library(readr)
crabs <- read_csv("./data/crabs.csv")
library(readr)
crabs <- read_csv("./data/crabs.csv")
glm_fit <- glm(data = crabs,
formula = satellites ~ width + I(width^2) + colour)
glm_fit <- glm(data = crabs,
formula = satellites ~ width + I(width^2) + colour,
family = poisson(link="log") )
summary(glm_fit)
plot(glm_fit)
libary(ggplot2)
library(ggplot2)
install.packages("broom")
library(broom)
glm_fit_df <- tidy(glm_fit)
glm_fit_df
glm_fit_aug <- augment(glm_fit)
glm_fit_aug
glm_fit_aug %>% mutate(real.fit = exp(.fitted))
library(dplyr)
glm_fit_aug %>% mutate(real.fit = exp(.fitted))
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>% View()
4-2.9172113
exp(1.07062812)
exp(0.59979371)
exp(0.60377996)
log(1.082789)
exp(4.096)
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>% View()
help(glm)
library(ggplot2)
library(broom)
library(dplyr)
glm_fit_df <- tidy(glm_fit)
glm_fit_df
glm_fit_aug <- augment(glm_fit)
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>%
ggplot(aes(x=.fitted,y=(satellites - .fitted)/(.fitted)  )) + geom_point()
library(ggplot2)
library(broom)
library(dplyr)
glm_fit_df <- tidy(glm_fit)
glm_fit_df
glm_fit_aug <- augment(glm_fit)
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>%
ggplot(aes(x=.fitted,y=(satellites - .fitted)/(.fitted)  )) + geom_point()
ggplotly
library(ggplot2)
library(broom)
library(dplyr)
glm_fit_df <- tidy(glm_fit)
glm_fit_df
glm_fit_aug <- augment(glm_fit)
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>%
ggplot(aes(x=.fitted,y=(satellites - .fitted)/(.fitted)  )) + geom_point()
ggplotly()
library(ggplot2)
library(broom)
library(dplyr)
library(plotly)
glm_fit_df <- tidy(glm_fit)
glm_fit_df
glm_fit_aug <- augment(glm_fit)
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>%
ggplot(aes(x=.fitted,y=(satellites - .fitted)/(.fitted)  )) + geom_point()
ggplotly()
glm_fit <- glm(data = crabs,
formula = satellites ~ width + I(width^2) + colour + weight + spine_condition,
family = poisson(link="log") )
summary(glm_fit)
plot(glm_fit)
library(ggplot2)
library(broom)
library(dplyr)
library(plotly)
glm_fit_df <- tidy(glm_fit)
glm_fit_df
glm_fit_aug <- augment(glm_fit)
glm_fit_aug %>% mutate(real.fit = exp(.fitted)) %>%
ggplot(aes(x=.fitted,y=(satellites - .fitted)/(.fitted)  )) + geom_point()
ggplotly()
glm_fit_aug
library(AER)
data("ShipAccidents")
sa <- ShipAccidents %>% filter(service > 0)
sa_full <- glm(data = sa,
formula = incidents ~ type + construction + operation,
family = poisson(link="log"),
offset = log(service)
)
summary(sa_full)
plot(sa_full)
View(sa)
View(sa)
sa <- ShipAccidents %>% filter(service > 0)
sa_full <- glm(data = sa,
formula = incidents ~ type + construction + operation,
family = poisson(link="log"),
offset = log(service)
)
summary(sa_full)
help(tabl)
help(table)
head(sa)
data("ShippingIncidents")
library(AER)
library(dplyr)
data("ShippingIncidents")
data("ShippingAccidents")
sa <- ShipAccidents %>% filter(service > 0)
head(sa)
sa <- ShipAccidents %>% filter(service > 0)
sa_full <- glm(data = sa,
formula = incidents ~ type + construction +
operation + type:operation,
family = poisson(link="log"),
offset = log(service)
)
summary(sa_full)
anova(sa_full)
pchisq(5.045,4,lower.tail = FALSE)
sa_main_effects <- glm(data = sa,
formula = incidents ~ type + construction +
operation,
family = poisson(link="log"),
offset = log(service)
)
sa_main_effects <- glm(data = sa,
formula = incidents ~ type + construction +
operation,
family = poisson(link="log"),
offset = log(service)
)
summary(sa_main_effects)
sum(residuals(sa_main_effects, type="pearson"))
sum(residuals(sa_main_effects, type="pearson")^2)
anova(sa_main_effects, test="Chisq")
sum(residuals(sa_main_effects, type="pearson")^2)
pchisq(sum(residuals(sa_main_effects, type="pearson")^2), nrow(sa)-4)
pchisq(sum(residuals(sa_main_effects, type="pearson")^2), nrow(sa)-4, lower.tail = FALSE)
Pearson_stat <- sum(residuals(sa_main_effects, type="pearson")^2)
Pearson_stat
nrow(sa)-4
pchisq(Pearson_stat, nrow(sa)-4, lower.tail = FALSE)
head(sa,n = 10)
anova(sa_main_effects, test="Chisq")
pchisq(Pearson_stat, nrow(sa)-4, lower.tail = FALSE)
Pearson_stat
summary(sa_main_effects)
pchisq(Pearson_stat, 25, lower.tail = FALSE)
anova(sa_main_effects, test="Chisq")
plot(sa_main_effects)
sa_main_effects <- glm(data = sa,
formula = incidents ~ type + construction +
operation + type:constructions,
family = poisson(link="log"),
offset = log(service)
)
sa_main_effects <- glm(data = sa,
formula = incidents ~ type + construction +
operation + type:construction,
family = poisson(link="log"),
offset = log(service)
)
summary(sa_main_effects)
Pearson_stat <- sum(residuals(sa_main_effects, type="pearson")^2)
pchisq(Pearson_stat, 25, lower.tail = FALSE) #N-P = 25 here!
anova(sa_main_effects, test="Chisq")
plot(sa_main_effects)
summary(sa_main_effects)
pchisq(Pearson_stat, 25, lower.tail = FALSE) #N-P = 25 here!
summary(sa_main_effects)
pchisq(Pearson_stat, 14, lower.tail = FALSE) #N-P = 25 here!
anova(sa_main_effects, test="Chisq")
plot(sa_main_effects)
predict(sa_main_effects)
exp(predict(sa_main_effects))
sa_main_effects <- glm(data = sa,
formula = incidents ~ type + construction +
operation + type:construction,
family = poisson(link="log"),
offset = log(service)
)
summary(sa_main_effects)
Pearson_stat <- sum(residuals(sa_main_effects, type="pearson")^2)
pchisq(Pearson_stat, 14, lower.tail = FALSE) #N-P = 25 here!
anova(sa_main_effects, test="Chisq")
plot(sa_main_effects)
sa_main_effects$fitted.values
exp(sa_main_effects$fitted.values)
exp(sa_main_effects$fitted.values) %>% round()
exp(sa_main_effects$fitted.values) %>% round() %>% as.integer()
sa_main_effects
sa_main_effects$offset
predict(sa_main_effects)
sa_main_effects$fitted.values
sa_main_effects$fitted.values %>% round()
plot(residuals(sa_main_effects, type="pearson"),sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type="pearson"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type="deviance"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "pearson"),x=sa_main_effects$fitted.values)
plot(sa_main_effects)
plot(y=residuals(sa_main_effects, type = "pearson"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "raw"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "response"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "working"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "l"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "partial"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "response"),x=sa_main_effects$fitted.values)
plot(y=residuals(sa_main_effects, type = "pearson"),x=sa_main_effects$fitted.values)
sa <- ShipAccidents %>% filter(service > 0)
sa_full <- glm(data = sa,
formula = incidents ~ type + construction +
operation,
family = poisson(link="log"),
offset = log(service)
)
anova(sa_full)
anova(sa_full, test="Chisq")
Pearson_stat <- sum(residuals(sa_full, type="pearson")^2)
Pearson_stat <- sum(residuals(sa_full, type="pearson")^2)
Pearson_stat
summary(sa_full)
38/42
38/42
42/25
